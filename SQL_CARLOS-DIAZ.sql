CREATE DATABASE PROYECTO_COLEGIO;

USE PROYECTO_COLEGIO;

IF OBJECT_ID('RECORD_ACADEMICO') IS NOT NULL DROP TABLE RECORD_ACADEMICO;
IF OBJECT_ID('ESTUDIANTES') IS NOT NULL DROP TABLE ESTUDIANTES;
IF OBJECT_ID('DOCENTES') IS NOT NULL DROP TABLE DOCENTES;
IF OBJECT_ID('ASIGNATURAS') IS NOT NULL DROP TABLE ASIGNATURAS;
CREATE TABLE ASIGNATURAS(
	ID INT IDENTITY(1,1),
	CODIGO VARCHAR(3),
	NOMBRE VARCHAR(40),
	CREDITOS TINYINT

	CONSTRAINT PK_ASIGNATURAS_01 PRIMARY KEY(CODIGO)
)
GO
CREATE TABLE DOCENTES(
	ID INT IDENTITY(1,1),
	CODIGO VARCHAR(3),
	NOMBRE VARCHAR(40),
	APELLIDO VARCHAR(40),

	CONSTRAINT FK_DOCENTES_01 PRIMARY KEY(CODIGO),

	COD_ASIGNATURA VARCHAR(3) FOREIGN KEY REFERENCES ASIGNATURAS(CODIGO)
	ON UPDATE CASCADE
)
GO
CREATE TABLE ESTUDIANTES(
	ID INT IDENTITY(1,1),
	CODIGO VARCHAR(3),
	NOMBRE VARCHAR(40),
	APELLIDO VARCHAR(40),
	SEMESTRE TINYINT,
	CARRERA VARCHAR(40),

	CONSTRAINT FK_ESTUDIANTES_01 PRIMARY KEY(CODIGO),

	COD_ASIGNATURA VARCHAR(3) FOREIGN KEY REFERENCES ASIGNATURAS(CODIGO)
	ON UPDATE CASCADE
)
GO
CREATE TABLE RECORD_ACADEMICO(
	ID INT IDENTITY(1,1),
	CODIGO VARCHAR(3),
	FECHA DATE,
	PERIODO TINYINT,
	NOTA1 DECIMAL(5,2),
	NOTA2 DECIMAL(5,2),
	PROMEDIO AS (NOTA1+NOTA2)/2

	CONSTRAINT FK_RECORD_ACADEMICO_01 PRIMARY KEY(CODIGO),

	COD_ESTUDIANTE VARCHAR(3) FOREIGN KEY REFERENCES ESTUDIANTES(CODIGO),
	COD_DOCENTE VARCHAR(3) FOREIGN KEY REFERENCES DOCENTES(CODIGO)
	ON UPDATE CASCADE
)

-- PROCEDIMIENTOS ALMACENADOS --

	-- INSERT --

GO
--DROP PROC SP_INSERT_ASIGNATURA;
CREATE PROCEDURE SP_INSERT_ASIGNATURA(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@CREDITOS TINYINT
) WITH ENCRYPTION AS BEGIN
	INSERT INTO ASIGNATURAS(CODIGO, NOMBRE, CREDITOS) VALUES (@CODIGO, @NOMBRE, @CREDITOS)
END;
GO
--DROP PROC SP_INSERT_ESTUDIANTE;
CREATE PROCEDURE SP_INSERT_ESTUDIANTE(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@APELLIDO VARCHAR(40),
	@SEMESTRE TINYINT,
	@CARRERA VARCHAR(40),
	@COD_ASIGNATURA VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	INSERT INTO ESTUDIANTES(CODIGO, NOMBRE, APELLIDO, SEMESTRE, CARRERA, COD_ASIGNATURA) VALUES (@CODIGO, @NOMBRE, @APELLIDO, @SEMESTRE, @CARRERA, @COD_ASIGNATURA)
END;
GO
--DROP PROC SP_INSERT_DOCENTE;
CREATE PROCEDURE SP_INSERT_DOCENTE(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@APELLIDO VARCHAR(40),
	@COD_ASIGNATURA VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	INSERT INTO DOCENTES(CODIGO, NOMBRE, APELLIDO, COD_ASIGNATURA) VALUES (@CODIGO, @NOMBRE, @APELLIDO, @COD_ASIGNATURA)
END;
GO
--DROP PROC SP_INSERT_RECORD_ACADEMICO;
CREATE PROCEDURE SP_INSERT_RECORD_ACADEMICO(
	@CODIGO VARCHAR(3),
	@FECHA DATE,
	@PERIODO TINYINT,
	@NOTA1 DECIMAL(5,2),
	@NOTA2 DECIMAL(5,2),
	@COD_ESTUDIANTE VARCHAR(3),
	@COD_DOCENTE VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	INSERT INTO RECORD_ACADEMICO(CODIGO, FECHA, PERIODO, NOTA1, NOTA2, COD_ESTUDIANTE, COD_DOCENTE) VALUES (@CODIGO, @FECHA, @PERIODO, @NOTA1, @NOTA2, @COD_ESTUDIANTE, @COD_DOCENTE)
END;

	-- READ FOR CODIGO --

GO
--DROP PROC SP_READ_ASIGNATURA;
CREATE PROCEDURE SP_READ_ASIGNATURA(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT * FROM ASIGNATURAS WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READ_ESTUDIANTE;
CREATE PROCEDURE SP_READ_ESTUDIANTE(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT E.ID, E.CODIGO, E.NOMBRE, E.APELLIDO, E.SEMESTRE, E.CARRERA, A.NOMBRE AS 'ASIGNATURA' FROM ESTUDIANTES E
		INNER JOIN ASIGNATURAS A 
		ON A.CODIGO = E.COD_ASIGNATURA 
		WHERE E.CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READ_DOCENTE;
CREATE PROCEDURE SP_READ_DOCENTE(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT D.ID, D.CODIGO, D.NOMBRE, D.APELLIDO, A.NOMBRE AS 'ASIGNATURA' FROM DOCENTES D
		INNER JOIN ASIGNATURAS A 
		ON A.CODIGO = D.COD_ASIGNATURA 
		WHERE D.CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READ_RECORD_ACADEMICO;
CREATE PROCEDURE SP_READ_RECORD_ACADEMICO(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT R.CODIGO, R.FECHA, R.PERIODO, R.NOTA1, R.NOTA2, R.PROMEDIO, E.NOMBRE AS 'ESTUDIANTE', D.NOMBRE AS 'DOCENTE' FROM RECORD_ACADEMICO R
		INNER JOIN DOCENTES D 
		ON D.CODIGO = R.COD_DOCENTE 
		INNER JOIN ESTUDIANTES E 
		ON E.CODIGO = R.COD_ESTUDIANTE 
		INNER JOIN ASIGNATURAS A 
		ON E.COD_ASIGNATURA = A.CODIGO AND D.COD_ASIGNATURA = A.CODIGO
		WHERE R.CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;

	-- READ ALL --

GO
--DROP PROC SP_READALL_ASIGNATURA;
CREATE PROCEDURE SP_READALL_ASIGNATURA WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT * FROM ASIGNATURAS ORDER BY ID
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READALL_ESTUDIANTE;
CREATE PROCEDURE SP_READALL_ESTUDIANTE WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT E.ID, E.CODIGO, E.NOMBRE, E.APELLIDO, E.SEMESTRE, E.CARRERA, A.NOMBRE AS 'ASIGNATURA' FROM ESTUDIANTES E
		INNER JOIN ASIGNATURAS A 
		ON A.CODIGO = E.COD_ASIGNATURA
		ORDER BY E.ID
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READALL_DOCENTE;
CREATE PROCEDURE SP_READALL_DOCENTE WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT D.ID, D.CODIGO, D.NOMBRE, D.APELLIDO, A.NOMBRE AS 'ASIGNATURA' FROM DOCENTES D
		INNER JOIN ASIGNATURAS A 
		ON A.CODIGO = D.COD_ASIGNATURA
		ORDER BY D.ID
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_READALL_RECORD_ACADEMICO;
CREATE PROCEDURE SP_READALL_RECORD_ACADEMICO WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		SELECT R.CODIGO, R.FECHA, R.PERIODO, R.NOTA1, R.NOTA2, R.PROMEDIO, E.NOMBRE AS 'ESTUDIANTE', D.NOMBRE AS 'DOCENTE' FROM RECORD_ACADEMICO R
		INNER JOIN DOCENTES D 
		ON D.CODIGO = R.COD_DOCENTE 
		INNER JOIN ESTUDIANTES E 
		ON E.CODIGO = R.COD_ESTUDIANTE 
		INNER JOIN ASIGNATURAS A 
		ON E.COD_ASIGNATURA = A.CODIGO AND D.COD_ASIGNATURA = A.CODIGO
		ORDER BY R.ID
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE ENCUENTRA EL REGISTRO. ', ERROR_MESSAGE())
	END CATCH
END;

	-- UPDATE --

GO
--DROP PROC SP_UPDATE_ASIGNATURA;
CREATE PROCEDURE SP_UPDATE_ASIGNATURA(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@CREDITOS TINYINT
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		UPDATE ASIGNATURAS SET NOMBRE = @NOMBRE, CREDITOS = @CREDITOS WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE ACTUALIZAR. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_UPDATE_ESTUDIANTE;
CREATE PROCEDURE SP_UPDATE_ESTUDIANTE(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@APELLIDO VARCHAR(40),
	@SEMESTRE TINYINT,
	@CARRERA VARCHAR(40),
	@COD_ASIGNATURA VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		UPDATE ESTUDIANTES SET NOMBRE = @NOMBRE, APELLIDO = @APELLIDO, SEMESTRE = @SEMESTRE, CARRERA = @CARRERA, COD_ASIGNATURA = @COD_ASIGNATURA WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE ACTUALIZAR. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_UPDATE_DOCENTE;
CREATE PROCEDURE SP_UPDATE_DOCENTE(
	@CODIGO VARCHAR(3),
	@NOMBRE VARCHAR(40),
	@APELLIDO VARCHAR(40),
	@COD_ASIGNATURA VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		UPDATE  DOCENTES SET NOMBRE = @NOMBRE, APELLIDO = @APELLIDO, COD_ASIGNATURA = @COD_ASIGNATURA WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE ACTUALIZAR. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_UPDATE_RECORD_ACADEMICO;
CREATE PROCEDURE SP_UPDATE_RECORD_ACADEMICO(
	@CODIGO VARCHAR(3),
	@FECHA DATE,
	@PERIODO TINYINT,
	@NOTA1 DECIMAL(5,2),
	@NOTA2 DECIMAL(5,2),
	@COD_ESTUDIANTE VARCHAR(3),
	@COD_DOCENTE VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		UPDATE RECORD_ACADEMICO SET 
			FECHA = @FECHA, 
			PERIODO = @PERIODO, 
			NOTA1 = @NOTA1, 
			NOTA2 = @NOTA2, 
			COD_ESTUDIANTE = @COD_ESTUDIANTE, 
			COD_DOCENTE = @COD_DOCENTE 
			WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE ACTUALIZAR. ', ERROR_MESSAGE())
	END CATCH
END;

	-- DELETE FOR CODIGO --

GO
--DROP PROC SP_DELETE_ASIGNATURA;
CREATE PROCEDURE SP_DELETE_ASIGNATURA(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		DELETE FROM ASIGNATURAS WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE BORRAR CUANDO HAY REGISTROS DEPENDIENTES DE ESTA TABLA O EL REGISTRO NO EXISTE. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_DELETE_ESTUDIANTE;
CREATE PROCEDURE SP_DELETE_ESTUDIANTE(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		DELETE FROM ESTUDIANTES WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE BORRAR CUANDO HAY REGISTROS DEPENDIENTES DE ESTA TABLA O EL REGISTRO NO EXISTE. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_DELETE_DOCENTE;
CREATE PROCEDURE SP_DELETE_DOCENTE(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		DELETE FROM DOCENTES WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE BORRAR CUANDO HAY REGISTROS DEPENDIENTES DE ESTA TABLA O EL REGISTRO NO EXISTE. ', ERROR_MESSAGE())
	END CATCH
END;
GO
--DROP PROC SP_DELETE_RECORD_ACADEMICO;
CREATE PROCEDURE SP_DELETE_RECORD_ACADEMICO(
	@CODIGO VARCHAR(3)
) WITH ENCRYPTION AS BEGIN
	BEGIN TRY
		DELETE FROM RECORD_ACADEMICO WHERE CODIGO = @CODIGO
	END TRY
	BEGIN CATCH
		PRINT CONCAT('NO SE PUEDE BORRAR. ', ERROR_MESSAGE())
	END CATCH
END;



GO
ALTER VIEW TODO AS
	SELECT E.CODIGO AS 'COD ESTUDIANTE', E.NOMBRE AS 'ESTUDIANTE', D.CODIGO AS 'COD DOCENTE', D.NOMBRE AS 'DOCENTE', A.NOMBRE AS 'ASIGNATURA'
	FROM RECORD_ACADEMICO R
	RIGHT JOIN DOCENTES D 
	ON D.CODIGO = R.COD_DOCENTE 
	FULL JOIN ESTUDIANTES E 
	ON E.CODIGO = R.COD_ESTUDIANTE 
	RIGHT JOIN ASIGNATURAS A 
	ON E.COD_ASIGNATURA = A.CODIGO OR D.COD_ASIGNATURA = A.CODIGO
	GROUP BY D.NOMBRE,D.CODIGO, E.CODIGO,E.NOMBRE, A.NOMBRE

SELECT * FROM TODO;